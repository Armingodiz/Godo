// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

type MockFileStorage struct {
	mock.Mock
}

type MockFileStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileStorage) EXPECT() *MockFileStorage_Expecter {
	return &MockFileStorage_Expecter{mock: &_m.Mock}
}

func (_m *MockFileStorage) UploadFile(ctx context.Context, storagePath string, contentType string, data io.Reader, size int64) error {
	ret := _m.Called(ctx, storagePath, contentType, data, size)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r0 = rf(ctx, storagePath, contentType, data, size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type MockFileStorage_UploadFile_Call struct {
	*mock.Call
}

func (_e *MockFileStorage_Expecter) UploadFile(ctx interface{}, storagePath interface{}, contentType interface{}, data interface{}, size interface{}) *MockFileStorage_UploadFile_Call {
	return &MockFileStorage_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, storagePath, contentType, data, size)}
}

func (_c *MockFileStorage_UploadFile_Call) Run(run func(ctx context.Context, storagePath string, contentType string, data io.Reader, size int64)) *MockFileStorage_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *MockFileStorage_UploadFile_Call) Return(_a0 error) *MockFileStorage_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_UploadFile_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64) error) *MockFileStorage_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

func NewMockFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileStorage {
	mock := &MockFileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
