// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "todo-service/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

type MockTodoRepository struct {
	mock.Mock
}

type MockTodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoRepository) EXPECT() *MockTodoRepository_Expecter {
	return &MockTodoRepository_Expecter{mock: &_m.Mock}
}

func (_m *MockTodoRepository) Create(ctx context.Context, todo *entities.TodoItem) error {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.TodoItem) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type MockTodoRepository_Create_Call struct {
	*mock.Call
}

func (_e *MockTodoRepository_Expecter) Create(ctx interface{}, todo interface{}) *MockTodoRepository_Create_Call {
	return &MockTodoRepository_Create_Call{Call: _e.mock.On("Create", ctx, todo)}
}

func (_c *MockTodoRepository_Create_Call) Run(run func(ctx context.Context, todo *entities.TodoItem)) *MockTodoRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.TodoItem))
	})
	return _c
}

func (_c *MockTodoRepository_Create_Call) Return(_a0 error) *MockTodoRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.TodoItem) error) *MockTodoRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

func NewMockTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
